#常用git命令备忘

git status:查看工作区状态

git diff：查看具体修改了什么内容

git log:从最近到最远查看git commit 的记录(commit id +描述)
git log --pretty=oneline： （优化显示，一行显示一条commit记录）

git reset --hard HEAD^：  (版本回退，commit id的前几位即可，不必写全)

git reflog：在回退后依然可以查询到所有的历史（即回退这一过程也已经被记录）

git checkout -- filename.txt:可以丢弃工作区的修改，git add命令未执行前（删除错了可以用这条命令来恢复文件）

git rm filename.txt：删除文件

git pull origin master：从远程获取最新版本并merge到本地

git fetch origin master:tmp ：相当于是从远程获取最新版本到本地，不会自动merge，在merge前，我们可以查看更新情况，然后再决定是否合并，因此更为安全。
git diff tmp
git merge tmp

#############################    分支管理   #############################
git checkout -b dev:新建dev分支，git checkout 命令加上-b参数表示创建并切换，相当于以下两条命令：
git branch dev：新建dev分支
git checkout dev：切换到dev分支

建立远程分之与本地分支的联系
git push origin dev-iris:dev-iris

git branch：列出所有分支，当前分支前面会有一个*号

git checkout master:切换到dev分支
git merge dev：将dev分支合并到当前所在的分支(当git无法自动合并分支时，就必须首先解决冲突，解决冲突后，再提交，合并完成，用git log --graph命令可以看到分支合并图)
git branch -d dev:删除dev分支

通常，合并分支时，如果可能，git会使用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
git merge --no-ff -m "merge with no-ff" dev：--no-ff参数表示禁用Fast forward。因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。


++++++ BUG分支 ++++++
git stash:Git还提供了一个stash功能，可以把当前工作现场“储藏起来”，等以后恢复现场。
git stash list:查看被暂存的工作现场
恢复方式1：
git stash apply stash@{0}：恢复stash@{0}
git stash drop：删除stash内容
恢复方式2：
git stash pop：恢复的同时把stash内容也删了

修复哪个分支的bug就需要在哪个分支上创建临时分区。

++++++ Feature分支 ++++++
添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。
Git友情提醒，新分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用命令git branch -D featurename.
git checkout dev
git branch -d feature-vulcan
git branch -D feature-vulcan

git remote -v:查看远程库信息；
git branch --set-upstream dev origin/dev:指定本地dev分支与远程origin/dev分支的链接。
git pull
git push origin dev:将dev分支的修改提交到远程,本地新建的分支如果不推送到远程，对其他人就是不可见的；

++++++ 标签管理 ++++++
在Git中打标签非常简单，首先，切换到需要打标签的分支上:
git branch
git checkout master
git tag v1.0:打新标签

git tag：查看所有标签。

如果之前commit的忘了打标签，只需要找到对应的commit id,在打标签时加上commit id即可。如下:
git log --pretty=oneline --abbrev-commit
git tag v0.9 6224937

注意，标签不是按时间顺序列出，而是按字母排序的。可以用git show <tagname>查看标签信息:
git show v0.9

还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：
git tag -a v0.1 -m "version 0.1 released" 3628164

还可以通过-s用私钥签名一个标签,签名采用PGP签名，因此，必须首先安装gpg（GnuPG）
git tag -s v0.2 -m "signed version 0.2 released" fec145a

标签删除：若创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除
git tag -d v0.1
若标签已经推送到远程：
git tag -d v0.9
git push origin :refs/tags/v0.9

git push origin v1.0：推送某个标签到远程
git push origin --tags：一次性推送全部尚未推送到远程的本地标签

#####################################   git 配置   ##################################

git config --global color.ui true：让Git显示颜色，会让命令输出看起来更醒目

git check-ignore -v file：检查gitignore文件是否(哪一行)对file的过滤
git add -f App.class：强制添加App.class文件

配置别名：
git config --global alias.st status:配置git status = git st，下面以此类推
git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.br branch
git config --global alias.last 'log -1'：最近一次提交
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
